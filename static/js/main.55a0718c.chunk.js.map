{"version":3,"sources":["app.styles.jsx","context/app-context.jsx","context/app-context-provider.jsx","content.jsx","app.jsx","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","LineChartContainer","ValueList","ul","Value","li","FirstValue","Head","h1","Type","p","AppContext","React","createContext","loading","content","AppContextProvider","props","base","setTimer","setState","timeToShow","getStockInfo","clearInterval","timerInterval","axios","get","then","res","console","log","data","setInterval","catch","err","state","this","children","Provider","value","PureComponent","Content","context","values","key","Object","keys","val","Number","split","date","time","renderValues","map","idx","name","filter","join","open","high","low","close","slice","reverse","width","height","margin","top","right","left","bottom","strokeDasharray","unit","dataKey","type","domain","dot","strokeWidth","stroke","renderLineChart","renderError","App","Consumer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55a0718c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  padding: 15px;\n  max-width: 480px;\n`;\n\nexport const ValueContainer = styled.div`\n  display: flex;\n`;\n\nexport const LineChartContainer = styled.div`\n  flex: 1;\n`;\n\nexport const ValueList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  flex: 1;\n`;\n\nexport const Value = styled.li`\n  margin: 0;\n  padding: 5px;\n  color: white;\n  span {\n    font-weight: bold;\n  }\n`;\n\nexport const FirstValue = styled(Value)`\n  color: #09d3ac;\n  font-size: 40px;\n  span {\n    font-size: 100px;\n  }\n  p {\n    margin: 30px 0 10px;\n    font-size: 24px;\n  }\n`;\n\nexport const Head = styled.h1`\n  color: white;\n  font-size: 50px;\n  font-weight: normal;\n  margin: 20px 0;\n`;\n\nexport const Type = styled.p`\n  color: white;\n`;\n","import React from 'react';\n\nexport const AppContext = React.createContext({\n  loading: true,\n  content: null,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from './app-context';\nimport axios from 'axios';\n\nexport class AppContextProvider extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      content: {},\n      timeToShow: '1:00',\n    };\n  }\n  base = 60;\n\n  setTimer = () => {\n    this.base -= 1;\n    this.setState({\n      timeToShow: `0:${this.base < 10 ? `0${this.base}` : this.base}`,\n    });\n  };\n\n  getStockInfo = () => {\n    const timeToShow = '1:00';\n    this.setState({ loading: true, timeToShow });\n    clearInterval(this.timerInterval);\n    this.base = 60;\n    axios\n      .get('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=EPAM&interval=1min&apikey=3ON1I9KV93O2LPBT')\n      .then(res => {\n        console.log(res);\n        const content = res.data;\n        const loading = false;\n        this.timerInterval = setInterval(this.setTimer, 1000);\n        this.setState({ content, loading, timeToShow });\n      })\n      .catch(err => {\n        clearInterval(this.timerInterval);\n        const content = err;\n        const loading = false;\n        this.setState({ content, loading });\n      });\n  };\n  componentDidMount() {\n    this.getStockInfo();\n    setInterval(this.getStockInfo, 60000);\n  }\n\n  render() {\n    const { children } = this.props;\n    return <AppContext.Provider value={{ ...this.state }}>{children}</AppContext.Provider>;\n  }\n}\n\nAppContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { ValueList, FirstValue, Head, Type, LineChartContainer } from './app.styles';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend } from 'recharts';\n\nconst renderLineChart = values => {\n  // name: time\n  // val: value\n\n  const data = Object.keys(values)\n    .map((key, idx) => {\n      return {\n        name: key\n          .split(' ')[1]\n          .split(':')\n          .filter((value, idx) => idx !== 2)\n          .join(':'),\n        open: values[key]['1. open'],\n        high: values[key]['2. high'],\n        low: values[key]['3. low'],\n        close: values[key]['4. close'],\n      };\n    })\n    .slice(0, 45)\n    .reverse();\n\n  return (\n    <LineChartContainer>\n      <LineChart width={350} height={400} data={data} margin={{ top: 5, right: 10, left: 10, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" unit=\"5\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis type=\"number\" domain={['dataMin', 'dataMax']} />\n        <Legend />\n        <Line dot={false} strokeWidth={3} type=\"monotone\" dataKey=\"close\" stroke=\"#09d3ac\" />\n      </LineChart>\n    </LineChartContainer>\n  );\n};\n\nconst renderValues = values => {\n  const key = Object.keys(values)[0];\n  const val = <span>{Number(values[key]['4. close'])}</span>;\n  const [date, time] = key.split(' ');\n  return (\n    <ValueList>\n      <p>Date: {date}</p>\n      <FirstValue>\n        Time: {time} {val}\n      </FirstValue>\n    </ValueList>\n  );\n};\n\nconst renderError = data => {\n  return (\n    <>\n      <h2>The following error(s) occured</h2>\n      <ul>\n        {Object.keys(data).map(key => (\n          <li>{data[key]}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\n// <Type>{meta['1. Information']}</Type>\n\nconst Content = ({ context }) => {\n  const { loading, content, timeToShow } = context;\n  const data = content['Time Series (1min)'];\n  return loading ? (\n    <p>loading...</p>\n  ) : !data ? (\n    renderError(content)\n  ) : (\n    <>\n      <Type>Next snapshot in: {timeToShow}</Type>\n      <Head>{content['Meta Data']['2. Symbol']} STOCK</Head>\n      {renderValues(data)}\n      {renderLineChart(data)}\n    </>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport { AppContainer } from './app.styles';\nimport { AppContext, AppContextProvider } from './context';\nimport Content from './content';\n\nconst App = () => (\n  <AppContextProvider>\n    <AppContainer>\n      <AppContext.Consumer>{context => <Content context={context} />}</AppContext.Consumer>\n    </AppContainer>\n  </AppContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}