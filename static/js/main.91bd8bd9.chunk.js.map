{"version":3,"sources":["app.styles.jsx","context/app-context.jsx","context/app-context-provider.jsx","app.jsx","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","ValueContainer","LineChartContainer","ValueList","ul","Value","li","FirstValue","Head","h1","Type","p","AppContext","React","createContext","loading","content","AppContextProvider","props","getStockInfo","axios","get","then","res","console","log","data","setState","state","this","children","Provider","value","Component","renderVars","context","values","meta","Object","keys","map","key","idx","first","more","val","Number","text","split","name","filter","join","open","high","low","close","slice","reverse","width","height","margin","top","right","left","bottom","strokeDasharray","unit","dataKey","type","domain","dot","strokeWidth","stroke","renderLineChart","App","Consumer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91bd8bd9.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  padding: 15px;\n  max-width: 480px;\n`;\n\nexport const ValueContainer = styled.div`\n  display: flex;\n`;\n\nexport const LineChartContainer = styled.div`\n  flex: 1;\n`;\n\nexport const ValueList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  flex: 1;\n`;\n\nexport const Value = styled.li`\n  margin: 0;\n  padding: 5px;\n  color: white;\n  span {\n    font-weight: bold;\n  }\n`;\n\nexport const FirstValue = styled(Value)`\n  color: #09d3ac;\n  font-size: 40px;\n  span {\n    font-size: 100px;\n  }\n  p {\n    margin: 30px 0 10px;\n    font-size: 24px;\n  }\n`;\n\nexport const Head = styled.h1`\n  color: white;\n  font-size: 50px;\n  font-weight: normal;\n`;\n\nexport const Type = styled.p`\n  color: white;\n`;\n","import React from 'react';\n\nexport const AppContext = React.createContext({\n  loading: true,\n  content: null,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from './app-context';\nimport axios from 'axios';\n\nexport class AppContextProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      content: {},\n    };\n  }\n\n  getStockInfo = () =>\n    axios\n      .get('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=EPAM&interval=1min&apikey=3ON1I9KV93O2LPBT')\n      .then(res => {\n        console.log(res.data);\n        const content = res.data;\n        const loading = false;\n        this.setState({ content, loading });\n      });\n\n  componentDidMount() {\n    this.getStockInfo();\n    // setInterval(this.getStockInfo, 60000);\n  }\n\n  render() {\n    const { children } = this.props;\n    const { loading, content } = this.state;\n    return (\n      <AppContext.Provider\n        value={{\n          loading,\n          content,\n        }}\n      >\n        {children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nAppContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { AppContainer, ValueList, Value, FirstValue, Head, Type, LineChartContainer, ValueContainer } from './app.styles';\nimport { AppContext, AppContextProvider } from './context';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nconst renderLineChart = values => {\n  // name: time\n  // val: value\n\n  const data = Object.keys(values)\n    .map((key, idx) => {\n      return {\n        name: key\n          .split(' ')[1]\n          .split(':')\n          .filter((value, idx) => idx !== 2)\n          .join(':'),\n        open: values[key]['1. open'],\n        high: values[key]['2. high'],\n        low: values[key]['3. low'],\n        close: values[key]['4. close'],\n      };\n    })\n    .slice(0, 15)\n    .reverse();\n\n  console.log(data);\n\n  return (\n    <LineChartContainer>\n      <LineChart width={630} height={450} data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" unit=\"5\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis type=\"number\" domain={['dataMin', 'dataMax']} />\n        <Legend />\n\n        <Line dot={false} strokeWidth={3} type=\"monotone\" dataKey=\"close\" stroke=\"#09d3ac\" />\n      </LineChart>\n    </LineChartContainer>\n  );\n};\n\nconst renderValues = values => {\n  return (\n    <ValueList>\n      {Object.keys(values).map((key, idx) => {\n        const first = idx === 0;\n        const more = idx > 11;\n        const val = <span>{Number(values[key]['4. close'])}</span>;\n        const text = key.split(' ')[1];\n\n        if (first) {\n          return (\n            <>\n              <FirstValue key={key}>\n                {text} {val}\n                <p>Last 9 values</p>\n              </FirstValue>\n            </>\n          );\n        }\n        if (!more) {\n          return (\n            <Value key={key}>\n              {text} -> {val}\n            </Value>\n          );\n        }\n      })}\n    </ValueList>\n  );\n};\n\nconst renderMeta = meta => {\n  return (\n    <>\n      <Head>{meta['2. Symbol']} STOCK</Head>\n      <Type>{meta['1. Information']}</Type>\n    </>\n  );\n};\n\nconst renderVars = context => {\n  const { loading, content } = context;\n  const data = content['Time Series (1min)'];\n  return loading ? (\n    <p>loading</p>\n  ) : (\n    <>\n      {renderMeta(content['Meta Data'])}\n      <ValueContainer>\n        {renderValues(data)}\n        {renderLineChart(data)}\n      </ValueContainer>\n    </>\n  );\n};\n\nconst App = () => (\n  <AppContextProvider>\n    <AppContainer>\n      <AppContext.Consumer>{context => <>{renderVars(context)}</>}</AppContext.Consumer>\n    </AppContainer>\n  </AppContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}