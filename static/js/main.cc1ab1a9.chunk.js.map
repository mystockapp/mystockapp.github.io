{"version":3,"sources":["logo.svg","app.styles.jsx","context/app-context.jsx","context/app-context-provider.jsx","app.jsx","serviceWorker.js","index.js"],"names":["module","exports","AppContainer","styled","div","AppContext","img","header","a","React","createContext","vars","incrementAge","undefined","decrementAge","AppContextProvider","props","state","name","age","inc","this","current","find","setState","modifyAge","children","Provider","value","Component","App","require","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,koBCEpC,IAAMC,EAAeC,IAAOC,IAAV,KCEZC,GDEUF,IAAOG,IAAV,KAIKH,IAAOI,OAAV,KAWCJ,IAAOK,EAAV,KCjBMC,IAAMC,cAAc,CAC5CC,KAHW,GAIXC,kBAAcC,EACdC,kBAAcD,K,wCCDHE,EAAb,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXN,KAAM,CACJ,CACEO,KAAM,IACNC,IAAK,IAEP,CACED,KAAM,IACNC,IAAK,IAEP,CACED,KAAM,IACNC,IAAK,MAdM,EADrB,uEAqBYD,EAAME,GAAM,IACZT,EAASU,KAAKJ,MAAdN,KACFW,EAAUX,EAAKY,MAAK,qBAAGL,OAAgCA,KACzDI,IACFA,EAAQH,IAAMC,EAAME,EAAQH,IA3BhB,EA2BkCG,EAAQH,IA3B1C,GA6BdE,KAAKG,SAAS,CACZb,WA5BN,mCAgCeO,GACXG,KAAKI,UAAUP,GAAM,KAjCzB,mCAoCeA,GACXG,KAAKI,UAAUP,KArCnB,+BAwCY,IACAQ,EAAaL,KAAKL,MAAlBU,SACAf,EAASU,KAAKJ,MAAdN,KACR,OACE,kBAACN,EAAWsB,SAAZ,CACEC,MAAO,CACLjB,OACAC,aAAcS,KAAKT,aACnBE,aAAcO,KAAKP,eAGpBY,OAnDT,GAAwCjB,IAAMoB,WCM/BC,GARFC,EAAQ,IAET,kBACV,kBAAC,EAAD,KACE,kBAAC7B,EAAD,oCCIgB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cc1ab1a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  text-align: center;\n`;\n\nexport const AppLogo = styled.img`\n  height: 40vmin;\n`;\n\nexport const AppHeader = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const AppLink = styled.a`\n  color: #09d3ac;\n`;\n","import React from 'react';\n\nconst vars = [];\n\nexport const AppContext = React.createContext({\n  vars,\n  incrementAge: undefined,\n  decrementAge: undefined,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from './app-context';\n\nconst INCREMENT = 1;\n\nexport class AppContextProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vars: [\n        {\n          name: 'A',\n          age: 20,\n        },\n        {\n          name: 'B',\n          age: 30,\n        },\n        {\n          name: 'C',\n          age: 40,\n        },\n      ],\n    };\n  }\n\n  modifyAge(name, inc) {\n    const { vars } = this.state;\n    const current = vars.find(({ name: varName }) => varName === name);\n    if (current) {\n      current.age = inc ? current.age + INCREMENT : current.age - INCREMENT;\n    }\n    this.setState({\n      vars,\n    });\n  }\n\n  incrementAge(name) {\n    this.modifyAge(name, true);\n  }\n\n  decrementAge(name) {\n    this.modifyAge(name);\n  }\n\n  render() {\n    const { children } = this.props;\n    const { vars } = this.state;\n    return (\n      <AppContext.Provider\n        value={{\n          vars,\n          incrementAge: this.incrementAge,\n          decrementAge: this.decrementAge,\n        }}\n      >\n        {children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nAppContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { AppContainer } from './app.styles';\nimport { AppContextProvider } from './context';\n// eslint-disable-next-line global-require\nconst logo = require('./logo.svg');\n\nconst App = () => (\n  <AppContextProvider>\n    <AppContainer>Here comes the fun! yeah</AppContainer>\n  </AppContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}