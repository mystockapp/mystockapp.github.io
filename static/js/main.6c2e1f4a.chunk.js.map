{"version":3,"sources":["app.styles.jsx","context/app-context.jsx","context/app-context-provider.jsx","content.jsx","app.jsx","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","Button","button","LineChartContainer","ValueList","ul","Value","li","FirstValue","Head","h1","Type","p","AppContext","React","createContext","GET_URL","MARKET_HOURS","DATE","myStorage","window","localStorage","AppContextProvider","timerInterval","children","useState","loading","setLoading","content","setContent","timeToShow","setTimeToShow","getNextDay","param","moment","add","getIfMarketIsOpen","today","Date","currentHour","Number","getHours","getDay","base","setTimer","number","handleContent","handleResponse","response","data","setItem","JSON","stringify","setInterval","handleError","err","clearInterval","getStockInfo","marketOpen","currentWeekDay","weekday","format","getNextDayFormatted","removeItem","localContent","parse","getItem","axios","get","then","catch","useEffect","disableBodyScroll","document","querySelector","Provider","value","Content","context","onClick","location","reload","values","key","Object","keys","val","split","date","time","renderValues","map","idx","name","filter","join","open","high","low","close","slice","reverse","width","height","margin","top","right","left","bottom","strokeDasharray","unit","dataKey","type","domain","dot","strokeWidth","stroke","renderLineChart","renderError","App","Consumer","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c2e1f4a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  padding: 15px;\n  max-width: 480px;\n`;\n\nexport const Button = styled.button`\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  width: 40px;\n  height: 40px;\n`;\n\nexport const ValueContainer = styled.div`\n  display: flex;\n`;\n\nexport const LineChartContainer = styled.div`\n  flex: 1;\n`;\n\nexport const ValueList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  flex: 1;\n`;\n\nexport const Value = styled.li`\n  margin: 0;\n  padding: 5px;\n  color: white;\n  span {\n    font-weight: bold;\n  }\n`;\n\nexport const FirstValue = styled(Value)`\n  color: #09d3ac;\n  font-size: 40px;\n  span {\n    font-size: 100px;\n  }\n  p {\n    margin: 30px 0 10px;\n    font-size: 24px;\n  }\n`;\n\nexport const Head = styled.h1`\n  color: white;\n  font-size: 50px;\n  font-weight: normal;\n  margin: 0;\n`;\n\nexport const Type = styled.p`\n  color: white;\n`;\n","import React from 'react';\n\nexport const AppContext = React.createContext();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { disableBodyScroll } from 'body-scroll-lock';\nimport { AppContext } from './app-context';\nimport axios from 'axios';\nimport moment from 'moment';\n\nconst SYMBOL = 'EPAM';\nconst APIKEY = '3ON1I9KV93O2LPBT';\nconst INTERVAL = '1min';\nconst FUNCTION = 'TIME_SERIES_INTRADAY';\nconst GET_URL = `https://www.alphavantage.co/query?function=${FUNCTION}&symbol=${SYMBOL}&interval=${INTERVAL}&apikey=${APIKEY}`;\n\nconst MARKET_HOURS = [15, 22];\nconst BASE_TIME_TO_SHOW = 'in: 1:00';\nconst BASE_SEC = 60;\nconst MINUTE = 60000;\nconst SECOND = 1000;\nconst ROOT_ELEMENT = '#root';\nconst MARKET_START = '15:00 CET (9AM PST)';\nconst NEXT_DAY_FORMAT = 'MMM DD';\nconst ONE_INCREMENT = 1;\nconst DATE = {\n  DAY: 'day',\n  WEEKEND_INCREMENT: 8,\n  FRIDAY: 5,\n};\n\nconst myStorage = window.localStorage;\nconst LOCAL_STORAGE_ID = 'mystockstore';\n\nexport const AppContextProvider = ({ children }) => {\n  const [loading, setLoading] = React.useState(true);\n  const [content, setContent] = React.useState({});\n  const [timeToShow, setTimeToShow] = React.useState(BASE_TIME_TO_SHOW);\n\n  const getNextDay = param => moment().add(param, DATE.DAY);\n\n  const getNextDayFormatted = () => {\n    const currentWeekDay = moment().weekday();\n    const nextDay = currentWeekDay < DATE.FRIDAY ? getNextDay(ONE_INCREMENT) : getNextDay(-currentWeekDay + DATE.WEEKEND_INCREMENT);\n    return nextDay.format(NEXT_DAY_FORMAT);\n  };\n\n  const getIfMarketIsOpen = () => {\n    const today = new Date();\n    const currentHour = Number(today.getHours());\n    return !today.getDay() % 6 === 0 && currentHour >= MARKET_HOURS[0] && currentHour < MARKET_HOURS[1];\n  };\n\n  const twoDigitNumber = number => (number < 10 ? `0${number}` : number);\n\n  let base = BASE_SEC;\n\n  const setTimer = () => {\n    base = base - ONE_INCREMENT;\n    setTimeToShow(`in: 0:${twoDigitNumber(base)}`);\n  };\n\n  const handleContent = content => {\n    setLoading(false);\n    setContent(content);\n  };\n\n  let timerInterval;\n\n  const handleResponse = response => {\n    const { data } = response;\n    myStorage.setItem(LOCAL_STORAGE_ID, JSON.stringify(data));\n    timerInterval = getIfMarketIsOpen() && setInterval(setTimer, SECOND);\n    handleContent(data);\n  };\n\n  const handleError = err => {\n    clearInterval(timerInterval);\n    handleContent(err);\n  };\n\n  const getStockInfo = () => {\n    const marketOpen = getIfMarketIsOpen();\n    setTimeToShow(marketOpen ? BASE_TIME_TO_SHOW : ` ${getNextDayFormatted()} from ${MARKET_START}`);\n\n    if (marketOpen) {\n      myStorage.removeItem(LOCAL_STORAGE_ID);\n      base = BASE_SEC;\n      setLoading(true);\n      clearInterval(timerInterval);\n    }\n\n    const localContent = JSON.parse(myStorage.getItem(LOCAL_STORAGE_ID));\n\n    if (localContent) {\n      handleContent(localContent);\n    } else {\n      axios\n        .get(GET_URL)\n        .then(handleResponse)\n        .catch(handleError);\n    }\n  };\n\n  React.useEffect(() => {\n    getStockInfo();\n    setInterval(getStockInfo, MINUTE);\n    disableBodyScroll(document.querySelector(ROOT_ELEMENT));\n  }, []);\n\n  return <AppContext.Provider value={{ loading, content, timeToShow }}>{children}</AppContext.Provider>;\n};\n\nAppContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { ValueList, FirstValue, Head, Type, LineChartContainer, Button } from './app.styles';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend } from 'recharts';\nimport { relativeTimeRounding } from 'moment';\n\nconst renderLineChart = values => {\n  // name: time\n  // val: value\n\n  const data = Object.keys(values)\n    .map((key, idx) => {\n      return {\n        name: key\n          .split(' ')[1]\n          .split(':')\n          .filter((value, idx) => idx !== 2)\n          .join(':'),\n        open: values[key]['1. open'],\n        high: values[key]['2. high'],\n        low: values[key]['3. low'],\n        close: values[key]['4. close'],\n      };\n    })\n    .slice(0, 45)\n    .reverse();\n\n  return (\n    <LineChartContainer>\n      <LineChart width={350} height={375} data={data} margin={{ top: 5, right: 10, left: 10, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" unit=\"5\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis type=\"number\" domain={['dataMin', 'dataMax']} />\n        <Legend />\n        <Line dot={false} strokeWidth={3} type=\"monotone\" dataKey=\"close\" stroke=\"#09d3ac\" />\n      </LineChart>\n    </LineChartContainer>\n  );\n};\n\nconst renderValues = values => {\n  const key = Object.keys(values)[0];\n  const val = <span>{Number(values[key]['4. close'])}</span>;\n  const [date, time] = key.split(' ');\n  return (\n    <ValueList>\n      <p>Date: {date}</p>\n      <FirstValue>\n        Time: {time} {val}\n      </FirstValue>\n    </ValueList>\n  );\n};\n\nconst renderError = data => {\n  return (\n    <>\n      <h2>The following error(s) occured</h2>\n      <ul>\n        {Object.keys(data).map(key => (\n          <li>{data[key]}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\n// <Type>{meta['1. Information']}</Type>\n\nconst Content = ({ context }) => {\n  const { loading, content, timeToShow } = context;\n  const data = content['Time Series (1min)'];\n\n  const reload = () => {\n    window.location.reload();\n  };\n\n  return loading ? (\n    <p>loading...</p>\n  ) : !data ? (\n    renderError(content)\n  ) : (\n    <>\n      <Button onClick={reload}></Button>\n      <Type>Next snapshot {timeToShow}</Type>\n      <Head>\n        <strong>{content['Meta Data']['2. Symbol']}</strong> STOCK\n      </Head>\n      {renderValues(data)}\n      {renderLineChart(data)}\n    </>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport { AppContainer } from './app.styles';\nimport { AppContext, AppContextProvider } from './context';\nimport Content from './content';\n\nconst App = () => (\n  <AppContextProvider>\n    <AppContainer>\n      <AppContext.Consumer>{context => <Content context={context} />}</AppContext.Consumer>\n    </AppContainer>\n  </AppContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}